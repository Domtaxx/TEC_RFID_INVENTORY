-- Table to store roles
CREATE TABLE ROLE (
    ID int NOT NULL IDENTITY(1,1),
    ROLE_NAME varchar(64) NOT NULL,
    SUMMARY varchar(256),
    PRIMARY KEY (ID)
);

-- Table to store cycles
CREATE TABLE CYCLE (
    ID int NOT NULL IDENTITY(1,1),
    CYCLE_NAME varchar(255) NOT NULL,
    PRIMARY KEY (ID)
);

CREATE TABLE DEPARTMENT (
    ID int NOT NULL IDENTITY(1,1),
    DEPARTMENT_NAME varchar(256) NOT NULL,
    PRIMARY KEY (ID)
);
-- Table to store rooms for each department
CREATE TABLE ROOM (
    ID int NOT NULL IDENTITY(1,1),  -- Auto-incrementing room ID
    ROOM_NAME varchar(64) NOT NULL,  -- Name or number of the room
    ID_DEPARTMENT int NOT NULL,  -- Foreign key to link room to a department
    PRIMARY KEY (ID),
    CONSTRAINT FK_ROOM_DEPARTMENT FOREIGN KEY (ID_DEPARTMENT) REFERENCES DEPARTMENT(ID) ON DELETE CASCADE
);
CREATE TABLE EMPLOYEE (
    ID int NOT NULL IDENTITY(1,1),
    USER_PASSWORD BINARY(256) NOT NULL, -- Use BINARY(60) for hashed passwords (e.g., bcrypt)
    EMAIL varchar(255) NOT NULL UNIQUE,
    SSN varchar(20) NOT NULL UNIQUE, -- Allowing for longer SSNs
    FIRST_NAME varchar(50) NOT NULL, -- Allowing more characters
    SURNAME varchar(50) NOT NULL,    -- Allowing more characters
    ID_DEPARTMENT int,  -- Foreign key to link employee to one department
    ID_ROLE int,  -- Foreign key to link employee to one role
    PRIMARY KEY (ID),
    CONSTRAINT FK_EMPLOYEE_DEPARTMENT FOREIGN KEY (ID_DEPARTMENT) REFERENCES DEPARTMENT(ID) ON DELETE SET NULL, -- If department is deleted, set department to NULL
    CONSTRAINT FK_EMPLOYEE_ROLE FOREIGN KEY (ID_ROLE) REFERENCES ROLE(ID) ON DELETE SET NULL -- If role is deleted, set role to NULL
);

CREATE TABLE ITEM (
    ID int NOT NULL IDENTITY(1,1),
    ITEM_NAME varchar(64) NOT NULL,
    SUMMARY varchar(512),
    ID_DEPARTMENT int,
    NFS varchar(128),
    ITEM_STATE bit,
    PRIMARY KEY (ID),
    CONSTRAINT FK_ITEM_DEPARTMENT FOREIGN KEY (ID_DEPARTMENT) REFERENCES DEPARTMENT(ID) ON DELETE SET NULL
);

CREATE INDEX IDX_ITEM_DEPARTMENT ON ITEM(ID_DEPARTMENT); -- Adding index for the foreign key



CREATE TABLE ITEM_REGISTRY (
    ID_EMPLOYEE int NOT NULL,
    ID_ITEM int NOT NULL,
    REGISTRY_DATE DATETIME NOT NULL,
    ID_ROOM int NOT NULL,  -- Foreign key to reference a room
    ID_CYCLE int NOT NULL,  -- Foreign key to reference the CYCLE table
    PRIMARY KEY (ID_EMPLOYEE, ID_ITEM, REGISTRY_DATE),
    CONSTRAINT FK_ITEM_REGISTRY_EMPLOYEE FOREIGN KEY (ID_EMPLOYEE) REFERENCES EMPLOYEE(ID) ON DELETE CASCADE,
    CONSTRAINT FK_ITEM_REGISTRY_ITEM FOREIGN KEY (ID_ITEM) REFERENCES ITEM(ID) ON DELETE CASCADE,
    CONSTRAINT FK_ITEM_REGISTRY_ROOM FOREIGN KEY (ID_ROOM) REFERENCES ROOM(ID) ON DELETE CASCADE,
    CONSTRAINT FK_ITEM_REGISTRY_CYCLE FOREIGN KEY (ID_CYCLE) REFERENCES CYCLE(ID) ON DELETE CASCADE
);

CREATE INDEX IDX_ITEM_REGISTRY_EMPLOYEE ON ITEM_REGISTRY(ID_EMPLOYEE);
CREATE INDEX IDX_ITEM_REGISTRY_ITEM ON ITEM_REGISTRY(ID_ITEM);
CREATE INDEX IDX_ITEM_REGISTRY_CYCLE ON ITEM_REGISTRY(ID_CYCLE);


-- Optional index for optimizing department and role-based lookups
CREATE INDEX IDX_EMPLOYEE_DEPARTMENT ON EMPLOYEE(ID_DEPARTMENT);
CREATE INDEX IDX_EMPLOYEE_ROLE ON EMPLOYEE(ID_ROLE);


-- Inserting departments
INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('ESCUELA INGENIERÍA EN COMPUTADORES');
INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('ESCUELA INGENIERÍA EN COMPUTACIÓN');
INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('ESCUELA INGENIERÍA EN ELECTRÓNICA');

-- Inserting roles
INSERT INTO ROLE (ROLE_NAME, SUMMARY) VALUES ('ADMIN', 'ACCESO COMPLETO');
INSERT INTO ROLE (ROLE_NAME, SUMMARY) VALUES ('REGULAR', 'ACCESO BASICO');

-- Inserting cycles
INSERT INTO CYCLE (CYCLE_NAME) VALUES ('SEMESTRE 1');
INSERT INTO CYCLE (CYCLE_NAME) VALUES ('SEMESTRE 2');
INSERT INTO CYCLE (CYCLE_NAME) VALUES ('CUATRIMESTRE 1');
INSERT INTO CYCLE (CYCLE_NAME) VALUES ('CUATRIMESTRE 2');
INSERT INTO CYCLE (CYCLE_NAME) VALUES ('CUATRIMESTRE 3');
INSERT INTO CYCLE (CYCLE_NAME) VALUES ('CUATRIMESTRE 4');


-- Inserting employees (Assuming role and department IDs exist)
INSERT INTO EMPLOYEE (USER_PASSWORD, EMAIL, SSN, FIRST_NAME, SURNAME, ID_DEPARTMENT, ID_ROLE) 
VALUES (HASHBYTES('SHA2_256', '123456789'), 'briwag88@estudiantec.cr', '118050449', 'Brian', 'Wagemans', 1, 1);

INSERT INTO EMPLOYEE (USER_PASSWORD, EMAIL, SSN, FIRST_NAME, SURNAME, ID_DEPARTMENT, ID_ROLE) 
VALUES (HASHBYTES('SHA2_256', '123456789'), 'jane.smith@gmail.com', '118050448', 'Jane', 'Smith', 2, 2);

-- Inserting items
INSERT INTO ITEM (ITEM_NAME, SUMMARY, ID_DEPARTMENT, NFS, ITEM_STATE) 
VALUES ('Laptop', 'Dell Latitude 5400', 3, '1',1);

INSERT INTO ITEM (ITEM_NAME, SUMMARY, ID_DEPARTMENT, NFS, ITEM_STATE) 
VALUES ('Projector', 'Epson PowerLite', 1, '2',1);

-- Insert rooms for departments
-- Example random GPS coordinates for rooms
INSERT INTO ROOM (ROOM_NAME, ID_DEPARTMENT) 
VALUES ('F2-07', 1);  -- Room 101 in Department 1

INSERT INTO ROOM (ROOM_NAME, ID_DEPARTMENT) 
VALUES ('F5-01', 1);  -- Room 202 in Department 2

-- Example of another room in the same department
INSERT INTO ROOM (ROOM_NAME, ID_DEPARTMENT) 
VALUES ('F2-02', 2);  -- Room 103 in Department 1

-- Inserting registry entries with random GPS coordinates for the PLACE field
-- Example random coordinates: Latitude 37.7749, Longitude -122.4194 (San Francisco, CA)
INSERT INTO ITEM_REGISTRY (ID_EMPLOYEE, ID_ITEM, REGISTRY_DATE, ID_ROOM, ID_CYCLE)
VALUES (1, 1, '2024-10-01 09:00:00', 1, 1);  -- Random GPS coordinates for Employee 1

-- Example random coordinates: Latitude -33.8688, Longitude 151.2093 (Sydney, Australia)
INSERT INTO ITEM_REGISTRY (ID_EMPLOYEE, ID_ITEM, REGISTRY_DATE, ID_ROOM, ID_CYCLE)
VALUES (1, 2, '2024-10-02 14:00:00', 1, 1);  -- Random GPS coordinates for Employee 2

-- Example random coordinates: Latitude -33.8688, Longitude 151.2093 (Sydney, Australia)
INSERT INTO ITEM_REGISTRY (ID_EMPLOYEE, ID_ITEM, REGISTRY_DATE, ID_ROOM, ID_CYCLE)
VALUES (1, 2, '2024-10-02 14:00:01', 1, 1);  -- Random GPS coordinates for Employee 2
